{
  "openapi": "3.0.2",
  "info": {
    "title": "Cinema Backend API",
    "version": "1.0.0",
    "description": "Back End API for Cinema System",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": ""
    }
  },
  "tags": [
    {
      "name": "all-role",
      "description": "Can be accessed by all role"
    },
    {
      "name": "admin-role",
      "description": "Can only be accessed by admin role"
    },
    {
      "name": "user-role",
      "description": "Can be accessed by user"
    },
    {
      "name": "movie-resource",
      "description": "Movie related api"
    },
    {
      "name": "booking-resource",
      "description": "Booking related api"
    },
    {
      "name": "showtime-resource",
      "description": "Showtime related api"
    },
    {
      "name": "user-resource",
      "description": "User related api"
    },
    {
      "name": "auth",
      "description": "routes for auth"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:3000/api",
      "description": "Local server"
    }
  ],
  "paths": {
    "/movies/query/p": {
      "get": {
        "description": "Get movie data by query",
        "tags": ["all-role", "movie-resource"],
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "required": false,
            "description": "Movie title",
            "schema": {
              "type": "string",
              "example": "Roma"
            }
          },
          {
            "in": "query",
            "name": "director",
            "required": false,
            "description": "Movie director",
            "schema": {
              "type": "string",
              "example": "Alfonso Cuaron"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Movie data accroding to query param",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Movie"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/DatabaseError"
          }
        }
      }
    },
    "/movies/{id}": {
      "delete": {
        "description": "Delete movie data by ObjectId",
        "tags": ["admin-role", "movie-resource"],
        "security": [{ "JWT": ["admin"] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Movie id as Mongo ObjectId",
            "schema": {
              "type": "string",
              "format": "ObjectId",
              "example": "5fb4e2c3b7ad5b4108d0ff67"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/InvalidCredential"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/DatabaseError"
          }
        }
      },
      "get": {
        "description": "Get movie data by ObjectId",
        "security": [],
        "tags": ["all-role", "movie-resource"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Movie id as Mongo ObjectId",
            "schema": {
              "type": "string",
              "format": "ObjectId",
              "example": "5fb4e2c3b7ad5b4108d0ff67"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Movie found for id",
            "$ref": "#/components/schemas/Movie"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/DatabaseError"
          }
        }
      }
    },
    "/movies": {
      "patch": {
        "description": "Update movie data",
        "tags": ["admin-role", "movie-resource"],
        "security": [
          {
            "JWT": ["admin"]
          }
        ],
        "requestBody": {
          "description": "Movie data for update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Movie"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Movie updated"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/InvalidCredential"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/DatabaseError"
          }
        }
      },
      "post": {
        "description": "Create a new movie data",
        "security": [{ "JWT": ["admin"] }],
        "tags": ["admin-role", "movie-resource"],
        "requestBody": {
          "description": "Movie data to be created",
          "required": true,
          "content": {
            "aplication/json": {
              "schema": {
                "$ref": "#/components/schemas/Movie-to-create"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/InvalidCredential"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/DatabaseError"
          }
        }
      },
      "get": {
        "description": "Get all Movies data",
        "security": [],
        "tags": ["all-role", "movie-resource"],
        "responses": {
          "200": {
            "description": "All Movies data in Array of JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Movie"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/DatabaseError"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["admin-role", "user-resource"],
        "security": [
          {
            "JWT": ["admin"]
          }
        ],
        "description": "Get a user data by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "User id as Mongo ObjectId",
            "schema": {
              "type": "string",
              "format": "ObjectId",
              "example": "5fb4e2c3b7ad5b4108d0ff67"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/InvalidCredential"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/DatabaseError"
          }
        }
      }
    },
    "/users": {
      "post": {
        "description": "Create user",
        "tags": ["admin-role", "user-resource"],
        "security": [
          {
            "JWT": ["admin"]
          }
        ],
        "requestBody": {
          "description": "Movie data to be created",
          "required": true,
          "content": {
            "aplication/json": {
              "schema": {
                "$ref": "#/components/schemas/User-to-create"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/InvalidCredential"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/DatabaseError"
          }
        }
      },
      "get": {
        "description": "Get all user data",
        "tags": ["admin-role", "user-resource"],
        "security": [
          {
            "JWT": ["admin"]
          }
        ],
        "responses": {
          "200": {
            "description": "All Users data in Array of JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/InvalidCredential"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/DatabaseError"
          }
        }
      }
    },
    "/showtimes/{id}": {
      "delete": {
        "description": "Delete showtime data by ObjectId",
        "tags": ["admin-role", "showtime-resource"],
        "security": [{ "JWT": ["admin"] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Showtime id as Mongo ObjectId",
            "schema": {
              "type": "string",
              "format": "ObjectId",
              "example": "5fb4e2c3b7ad5b4108d0ff67"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/InvalidCredential"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/DatabaseError"
          }
        }
      },
      "get": {
        "description": "Get showtime data by ObjectId",
        "security": [],
        "tags": ["all-role", "showtime-resource"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Showtime id as Mongo ObjectId",
            "schema": {
              "type": "string",
              "format": "ObjectId",
              "example": "5fb4e2c3b7ad5b4108d0ff67"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Showtime found for id",
            "$ref": "#/components/schemas/Movie"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/DatabaseError"
          }
        }
      }
    },
    "/showtimes/movie": {
      "post": {
        "tags": ["admin-role", "showtime-resource"],
        "description": "Add movie to showtime",
        "requestBody": {
          "description": "Movie id to be added",
          "content": {
            "application/json": {
              "schema": {
                "required": ["movie", "showtime"],
                "type": "object",
                "properties": {
                  "movie": {
                    "description": "movie id",
                    "type": "string",
                    "format": "ObjectId"
                  },
                  "showtime": {
                    "description": "showtime id",
                    "type": "string",
                    "format": "ObjectId"
                  }
                },
                "example": {
                  "movie": "5fcf76d9e5b0d527acdb3fb9",
                  "showtime": "5fcf76d9e5b0d527acdb3fb7"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": ["admin"]
          }
        ],
        "responses": {
          "200": {
            "description": "Showtime added with movie"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/InvalidCredential"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/DatabaseError"
          }
        }
      }
    },
    "/showtimes": {
      "post": {
        "description": "Create a new showtime data",
        "security": [{ "JWT": ["admin"] }],
        "tags": ["admin-role", "showtime-resource"],
        "requestBody": {
          "description": "Showtime data to be created",
          "required": true,
          "content": {
            "aplication/json": {
              "schema": {
                "$ref": "#/components/schemas/Movie-to-create"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/InvalidCredential"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/DatabaseError"
          }
        }
      },
      "get": {
        "description": "Get all Showtimes data",
        "tags": ["all-role", "showtime-resource"],
        "responses": {
          "200": {
            "description": "All Showtimes data in Array of JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Showtime"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/DatabaseError"
          }
        }
      }
    },
    "/bookings/{id}": {
      "get": {
        "description": "Get Booking data by ObjectId",
        "security": [
          {
            "JWT": ["admin", "user"]
          }
        ],
        "tags": ["user-role", "admin-role", "movie-resource"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Movie id as Mongo ObjectId",
            "schema": {
              "type": "string",
              "format": "ObjectId",
              "example": "5fb4e2c3b7ad5b4108d0ff67"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Movie found for id",
            "$ref": "#/components/schemas/Movie"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/DatabaseError"
          }
        }
      }
    },
    "/bookings/query/p": {
      "get": {
        "tags": ["admin-role", "booking-resource"],
        "description": "Gwt booking data by query",
        "security": [
          {
            "JWT": ["admin"]
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "movie",
            "schema": {
              "type": "string",
              "format": "ObjectId",
              "example": "5fb4e2c3b7ad5b4108d0ff67"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "user",
            "schema": {
              "type": "string",
              "format": "ObjectId",
              "example": "5fb4e2c3b7ad5b4108d0ff67"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "showtime",
            "schema": {
              "type": "string",
              "format": "ObjectId",
              "example": "5fb4e2c3b7ad5b4108d0ff67"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/bookings": {
      "post": {
        "tags": ["user-role", "admin-role", "booking-resource"],
        "description": "Create a booking data",
        "security": [
          {
            "JWT": ["admin", "user"]
          }
        ],
        "requestBody": {
          "description": "Booking data to be created",
          "required": true,
          "content": {
            "aplication/json": {
              "schema": {
                "$ref": "#/components/schemas/Booking-to-create"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/InvalidCredential"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/DatabaseError"
          }
        }
      },
      "get": {
        "tags": ["admin-role", "booking-resource"],
        "description": "Get all bookings data",
        "security": [
          {
            "JWT": ["admin"]
          }
        ],
        "responses": {
          "200": {
            "description": "All Bookings data in Array of JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Booking"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/InvalidCredential"
          },
          "403": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/DatabaseError"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "description": "Sign in for user",
        "requestBody": {
          "description": "Credentials",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["username", "password"],
                "properties": {
                  "username": {
                    "description": "User's username.",
                    "type": "string",
                    "example": "kinbote"
                  },
                  "password": {
                    "description": "User's password.",
                    "type": "string",
                    "example": "kinbote01"
                  }
                }
              }
            }
          }
        },
        "tags": ["all-role", "auth"],
        "responses": {
          "200": {
            "description": "Sign-in success with Token and user description",
            "content": {
              "application/json": {
                "example": {
                  "response": {
                    "value": {
                      "message": "User Authenticated",
                      "user": {
                        "id": "5fb4e2c3b7ad5b4108d0ff67",
                        "username": "kinbote",
                        "email": "kinbote@gmail.com",
                        "role": "User"
                      },
                      "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NSwiaWF0IjoxNjAxMzc0MzYyLCJleHAiOjE2MDE0NjA3NjJ9.5bzF3IQjhRRJNee8KpUzfTYUB8tnI72HF4cm3pspXyE"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/InvalidCredential"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/DatabaseError"
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": ["all-role", "auth"],
        "description": "",
        "requestBody": {
          "description": "User to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User-to-create"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/DatabaseError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Movie": {
        "description": "Movie data",
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "ObjectId",
            "description": "ObjectId assigned default by MongoDB",
            "example": "ObjectId('5fb4e2c3b7ad5b4108d0ff67')"
          },
          "title": {
            "type": "string",
            "description": "Title of the movie",
            "example": "Eternal Sunshine of The Spotless Mind"
          },
          "director": {
            "type": "string",
            "description": "Director of the movie",
            "example": "Michel Gondry"
          },
          "summary": {
            "type": "string",
            "description": "Summary of the movie",
            "example": "A couple tries to forget each other, what waited beyond them shake their core"
          },
          "rating": {
            "type": "number",
            "description": "Rating of the movie",
            "minimum": 0.0,
            "maximum": 5.0
          }
        }
      },
      "Movie-to-create": {
        "description": "Movie data to be created",
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the movie",
            "example": "Eternal Sunshine of The Spotless Mind"
          },
          "director": {
            "type": "string",
            "description": "Director of the movie",
            "example": "Michel Gondry"
          },
          "summary": {
            "type": "string",
            "description": "Summary of the movie",
            "example": "A couple tries to forget each other, what waited beyond them shake their core"
          },
          "rating": {
            "type": "number",
            "description": "Rating of the movie",
            "minimum": 0.0,
            "maximum": 5.0
          }
        }
      },
      "Showtime": {
        "description": "Showtime data",
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "ObjectId",
            "description": "ObjectId assigned default by MongoDB",
            "example": "ObjectId('5fb4e2c3b7ad5b4108d0ff67')"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of the showtime",
            "example": "2020-11-18T09:00:51.294+00:00"
          },
          "movies": {
            "type": "array",
            "description": "Movies in the showtime",
            "items": {
              "$ref": "#/components/schemas/Movie"
            }
          }
        }
      },
      "Showtime-to-create": {
        "description": "Showtime data",
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time of the showtime",
            "example": "2020-11-18T09:00:51.294+00:00"
          },
          "movies": {
            "type": "array",
            "description": "Movies in the showtime",
            "items": {
              "$ref": "#/components/schemas/Movie"
            }
          }
        }
      },
      "Booking": {
        "description": "Booking made by User to see a movie at a showtime",
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "ObjectId",
            "description": "ObjectId assigned default by MongoDB",
            "example": "ObjectId('5fb4e2c3b7ad5b4108d0ff67')"
          },
          "user": {
            "type": "object",
            "description": "User made the booking",
            "$ref": "#/components/schemas/User"
          },
          "showtimes": {
            "type": "object",
            "description": "Showtime for the booking",
            "$ref": "#/components/schemas/Showtime"
          },
          "movie": {
            "type": "object",
            "description": "Movie to be seen at the booking",
            "$ref": "#/components/schemas/Movie"
          }
        }
      },
      "Booking-to-create": {
        "description": "Booking to be created",
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "description": "User made the booking",
            "$ref": "#/components/schemas/User"
          },
          "showtimes": {
            "type": "object",
            "description": "Showtime for the booking",
            "$ref": "#/components/schemas/Showtime"
          },
          "movie": {
            "type": "object",
            "description": "Movie to be seen at the booking",
            "$ref": "#/components/schemas/Movie"
          }
        }
      },
      "User": {
        "description": "User doing operations",
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "ObjectId",
            "description": "ObjectId assigned default by MongoDB",
            "example": "ObjectId('5fb4e2c3b7ad5b4108d0ff67')"
          },
          "username": {
            "type": "string",
            "description": "Username unique to each user",
            "example": "kinbote01"
          },
          "encrypted_password": {
            "type": "string",
            "format": "hash",
            "description": "Hashed password",
            "example": "2678d27b7faca76050e7b69727ee0bb22342c07796f1336ad066e2c0c439f426"
          },
          "email": {
            "type": "string",
            "description": "email of the user",
            "example": "kinbote@gmail.com"
          },
          "role": {
            "type": "string",
            "description": "Role of the user",
            "enum": ["User", "Admin"],
            "default": "User"
          },
          "full_name": {
            "type": "string",
            "description": "Full name of the user",
            "example": "Charles Kinbote"
          },
          "salt": {
            "type": "string",
            "description": "salt to hash the user password",
            "example": "2765381a-9ad9-4491-86a3-1523a18aeacb"
          }
        }
      },
      "User-to-create": {
        "description": "User doing operations",
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username unique to each user",
            "example": "kinbote01"
          },
          "plain_pasword": {
            "type": "string",
            "description": "Plain password",
            "example": "kinbotethebest"
          },
          "email": {
            "type": "string",
            "description": "email of the user",
            "example": "kinbote@gmail.com"
          },
          "role": {
            "type": "string",
            "description": "Role of the user",
            "enum": ["User", "Admin"],
            "default": "User"
          },
          "full_name": {
            "type": "string",
            "description": "Full name of the user",
            "example": "Charles Kinbote"
          }
        }
      },
      "User-oauth": {
        "description": "User registered by oauth",
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "ObjectId",
            "description": "ObjectId assigned default by MongoDB",
            "example": "ObjectId('5fb4e2c3b7ad5b4108d0ff67')"
          },
          "email": {
            "type": "string",
            "description": "email of the user",
            "example": "kinbote@gmail.com"
          },
          "role": {
            "type": "string",
            "description": "Role of the user",
            "enum": ["User", "Admin"],
            "default": "User"
          }
        }
      }
    },
    "responses": {
      "Updated": {
        "description": "Resource successfully updated",
        "content": {
          "application/json": {
            "schema": {}
          }
        }
      },
      "Deleted": {
        "description": "Resource successfully deleted",
        "content": {
          "application/json": {
            "schema": {}
          }
        }
      },
      "Created": {
        "description": "Resource successfully created",
        "content": {
          "application/json": {
            "schema": {}
          }
        }
      },
      "DatabaseError": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {}
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized or missing token",
        "content": {
          "application/json": {
            "schema": {}
          }
        }
      },
      "InvalidCredential": {
        "description": "Credential invalid",
        "content": {
          "application/json": {
            "schema": {}
          }
        }
      },
      "NotFoundError": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {}
          }
        }
      },
      "BadRequest": {
        "description": "Data required in body not found or Invalid ObjectId",
        "content": {
          "application/json": {
            "schema": {}
          }
        }
      }
    },
    "securitySchemes": {
      "JWT": {
        "type": "apiKey",
        "in": "header",
        "name": "x-access-token"
      },
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "oauth.google.com",
            "tokenUrl": "oauth.google.com/token"
          }
        }
      }
    }
  },
  "security": [
    {
      "JWT": ["admin", "user"]
    },
    {
      "OAuth2": []
    }
  ]
}
